syntax = "proto2";
import "common.proto";
import "lidar_scan.proto";
import "detector.proto";
import "tracker.proto";
import "sensor_fuse.proto";
import "pvrcnn.proto";

package wayside;

message DataFrame {
    // The frame index given by message-matcher.
    required uint64 frame_id = 1;

    // Sensor point cloud data.
    repeated LidarScanMessage point_clouds = 2;

    // Sensor image data.
    repeated ImageFrame images = 3;

    // Object detecion from images.
    repeated ImageDetection image_detections = 4;

    // Preprocessed point cloud data.
    optional PointCloudProcess processed_points = 5;

    repeated ClusterRelation cluster_rel = 6;
    repeated FuserPoint fused_points = 7;
    repeated FilteredPoint filtered_points = 8;
    repeated CoordTransform coord_transforms = 9;

    repeated TrackerAnnotation annotations = 10;
    repeated HomographyRelation homo_rel = 11;

    // Object detection from point cloud.
    optional PointCloudDetection pcd_detection = 12;

    // Final objects and tracks.
    optional Object3DList object_3d_list = 13;

    // the minimal timestamp among all devices computed after message-matcher
    optional uint64 timestamp = 14;
}

message ImageFrame {
    required DevicePath device = 1;
    required RecordTime timestamp = 3;
    required uint64 frame_id = 4;
    required Image image = 5;
    repeated ImageObject objects = 6;
}

message ImageObject {
    optional BBox2D bbox = 1;
    optional string class = 2;
    optional double confidence = 3;
    optional string bbox3d_host = 4 [deprecated = true];
    optional string bbox3d_source = 5 [deprecated = true];
    optional BBox3D bbox3d = 6;
    optional uint64 cluster_id = 7;
    optional uint64 track = 8;
    optional uint64 original_track = 9;
    optional Vector3D motion3d = 10;
    optional Vector2D motion2d = 11;
    optional kfPred kfpred = 12;
    optional uint64 homography_alias = 13;
    optional uint64 track_age = 14;
}


message ImageDetection {
    required DevicePath path = 1;
    repeated DetectorObject objects = 2;
}

message PointCloudProcess {
    required DevicePath major_device = 3;
    repeated ProcessedPoint fused_points = 4;
}


message PointCloudDetection {
    repeated BBoxPVRCNN bbox3d = 1;
    repeated TimestampDict timestamp_dict = 2;
}

message Object3DList {
    repeated Object3D objects = 1;
}

// Object Oriented Representation
message Object3D {
    // The timestamp of the frame of the object.
    required RecordTime timestamp = 1;
    // The track IDs generated from tracker.
    required uint64 track_id = 2;
    // The predicted object type from object-detector.
    required string object_type = 3;
    // The host_name of the Lidar that detected the 3D object. Currently is set to major Lidar due to point-cloud being fused already.
    optional string host_name = 8;
    // The 3D bounding boxes of the object.
    optional BBox3D bbox3d = 5;
    // repeated TrackerObject object_2d = 6;
    // The 2D bounding boxes in the images that contains the object.
    repeated ImageObject object_2d = 7;
}
